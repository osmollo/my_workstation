---

- name: "[GIT_CLONE] set git destination directory"
  set_fact:
    git_dest_dir: "{{ item.dest | default(git_dir + '/' + (item.repo | urlsplit('path')).split('/')[-1].split('.')[0]) }}"

- name: "[GIT_CLONE] creating directory '{{ git_dest_dir }}'"
  file:
    path: "{{ git_dest_dir }}"
    state: directory

- name: "[GIT_CLONE] Clone git repository '{{ item.repo }}'"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ git_dest_dir }}"
    clone: true
    accept_hostkey: true
  ignore_errors: true

- name: "[GIT_CLONE] Configure user email"
  git_config:
    name: user.email
    repo: "{{ git_dest_dir }}"
    scope: local
    value: "{{ git_config_user_email }}"

- name: "[GIT_CLONE] Configure ssh signinkey"
  git_config:
    name: user.signingkey
    repo: "{{ git_dest_dir }}"
    scope: local
    value: "{{ git_config_signingkey }}"

- name: "[GIT_CLONE] [GITHUB] Create github repository"
  include_role:
    name: tools/github_repo
  vars:
    github_token: "{{ git_tokens.github }}"
    repo_name: "{{ (item.repo | basename).split('.')[0] }}"
    repo_private: true
    repo_state: present
  when:
    - item.remote is defined
    - item.remote == "github"

- name: "[GIT_CLONE] [GITEA] Create github repository"
  include_role:
    name: tools/gitea_repo
  vars:
    gitea_token: "{{ git_tokens.gitea }}"
    repo_name: "{{ (item.repo | basename).split('.')[0] }}"
    repo_private: true
    repo_state: present

- name: "[GIT_CLONE] not-helm-value repository"
  when: "'helm-values' not in item.repo"
  block:
    - name: "[GIT_CLONE] [GITLAB] Create gitlab repository '{{ (item.repo | basename).split('.')[0] }}'"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ git_tokens.gitlab }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        visibility: private
        repo_state: present
      when:
        - (item.remote is defined and item.remote == "gitlab") or (git_work | bool)

    - name: "[GIT_CLONE] [GITLAB] Create new remote '{{ remote_url }}'"
      shell: "git remote add {{ item.remote | default('gitlab') }} {{ remote_url }}"
      changed_when: false
      args:
        chdir: "{{ git_dest_dir }}"
      when: item.remote is defined or git_work
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote | default('gitlab') }}.com:osmollo/{{ (item.repo | basename).split('.')[0] }}.git"

    - name: "[GIT_CLONE] [GITEA] Create gitea repository '{{ (item.repo | basename).split('.')[0] }}'"
      include_role:
        name: tools/gitea_repo
      vars:
        gitea_token: "{{ git_tokens.gitea }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        visibility: private
        repo_state: present
      when:
        - (item.remote is defined and item.remote == "gitea") or (git_work | bool)

    - name: "[GIT_CLONE] [GITEA] Create new remote '{{ remote_url }}'"
      shell: "git remote add {{ item.remote | default('gitea') }} {{ remote_url }}"
      changed_when: false
      args:
        chdir: "{{ git_dest_dir }}"
      when: item.remote is defined or git_work
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote | default('gitea') }}.com:osmollo/{{ (item.repo | basename).split('.')[0] }}.git"

- name: "[GIT_CLONE] helm-value repository"
  when: "'helm-values' in item.repo"
  vars:
    helm_repo_name: "{{ (item.repo | urlsplit('path')).split('/')[1] + '_' + (item.repo | urlsplit('path')).split('/')[-1].split('.')[0] }}"
  block:
    - name: "[GIT_CLONE] [GITLAB] Create gitlab repository '{{ helm_repo_name }}'"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ git_tokens.gitlab }}"
        repo_name: "{{ helm_repo_name }}"
        visibility: private
        repo_state: present
      when:
        - (item.remote is defined and item.remote == "gitlab") or (git_work | bool)

    - name: "[GIT_CLONE] [GITLAB] Create new remote '{{ remote_url }}'"
      shell: "git remote add {{ item.remote | default('gitlab') }} {{ remote_url }}"
      changed_when: false
      args:
        chdir: "{{ git_dest_dir }}"
      when: item.remote is defined or git_work
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote | default('gitlab') }}.com:osmollo/{{ helm_repo_name }}.git"

    - name: "[GIT_CLONE] [GITEA] Create gitea repository '{{ helm_repo_name }}'"
      include_role:
        name: tools/gitea_repo
      vars:
        gitea_token: "{{ git_tokens.gitea }}"
        repo_name: "{{ helm_repo_name }}"
        visibility: private
        repo_state: present
      when:
        - (item.remote is defined and item.remote == "gitea") or (git_work | bool)

    - name: "[GIT_CLONE] [GITEA] Create new remote '{{ remote_url }}'"
      shell: "git remote add {{ item.remote | default('gitea') }} {{ remote_url }}"
      changed_when: false
      args:
        chdir: "{{ git_dest_dir }}"
      when: item.remote is defined or git_work
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote | default('gitea') }}.com:osmollo/{{ helm_repo_name }}.git"

- name: "[GIT_CLONE] update remote"
  shell: "git push {{ item.remote | default('gitlab') }} --{{ push_opt }} --force"
  loop:
    - "tags"
    - "all"
  loop_control:
    loop_var: push_opt
  when: item.remote is defined or git_work
  changed_when: false
  ignore_errors: true

- name: "[GIT_CLONE] Delete push for remote"
  shell: "git remote set-url --push {{ item.remote }} no_push"
  changed_when: false
  when:
    - item.remote is defined
    - item.no_push is defined
    - item.no_push | bool
