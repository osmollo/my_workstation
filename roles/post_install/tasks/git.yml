---

- block:
    - name: "[GIT] Wait until private ssh key exists"
      wait_for:
        path: "/home/{{ ansible_user }}/.ssh/id_rsa"
        timeout: "{{ wait_dropbox_sync }}"

    - name: "[GIT] Create {{ git_dir }}"
      file:
        path: "{{ git_dir }}"
        state: directory

    - name: "[GIT] Clone git repositories"
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        clone: true
        key_file: "/home/{{ ansible_user }}/.ssh/id_rsa"
        accept_hostkey: true
      with_items:
        - "{{ git_repositories.work }}"
        - "{{ git_repositories.home }}"
      ignore_errors: true
  tags:
    - clone_repos

- name: "[GIT] Create remotes for repositories"
  block:
    # create remotes for repositories copied in other platforms

    - name: "[GIT] Create github repositories for WORK"
      include_role:
        name: tools/github_repo
      vars:
        github_token: "{{ github_token_access }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: true
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "github"
      with_items: "{{ git_repositories.work }}"

    - name: "[GIT] Create gitlab repositories for WORK"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ gitlab_token_access }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        visibility: private
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "gitlab"
      with_items: "{{ git_repositories.work }}"

    - name: "[GIT] Create new remote for work repositories"
      shell: "git remote add {{ item.remote }} {{ remote_url }}"
      args:
        chdir: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
      with_items: "{{ git_repositories.work }}"
      when: item.remote is defined
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote }}.com:ohermosa/{{ (item.repo | basename).split('.')[0] }}.git"

    - name: "[GIT] Create github repositories for HOME"
      include_role:
        name: tools/github_repo
      vars:
        github_token: "{{ github_token_access }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: true
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "github"
      with_items: "{{ git_repositories.home }}"

    - name: "[GIT] Create gitlab repositories for HOME"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ gitlab_token_access }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: private
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "gitlab"
      with_items: "{{ git_repositories.home }}"

    - name: "[GIT] Create new remote for home repositories"
      shell: "git remote add {{ item.remote }} {{ remote_url }}"
      args:
        chdir: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
      with_items: "{{ git_repositories.home }}"
      when: item.remote is defined
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote }}.com:ohermosa/{{ (item.repo | basename).split('.')[0] }}.git"

    - name: "[GIT] Delete push for remote"
      shell: "git remote set-url --push {{ item.remote }} no_push"
      with_items: "{{ git_repositories.home }}"
      when:
        - item.remote is defined
        - item.no_push is defined
        - item.no_push | bool

    # Create remotes for repositories that have forks

    - name: "[GIT] get repositories to check if have forks"
      set_fact:
        repos_to_check: "{{ repos_to_check | default([]) | union([repository_name]) }}"
      with_items: "{{ git_repositories.home }}"
      when:
        - item.forks is defined
        - item.forks | bool
      vars:
        repository_name: "{{ (item.repo | basename).split('.')[0] }}"

    - gitlab_get_forks:
        gitlab_auth_key: "{{ gitlab_token_access }}"
        name: "{{ item }}"
      loop: "{{ repos_to_check }}"
      register: forks_response

    - name: "[GIT] create new remote for fork repositories"
      shell: "git remote add {{ item.user }} {{ item.remote }}"
      args:
        chdir: "{{ git_dir }}/{{ repo_name }}"
      changed_when: "'ya existe' not in remote_response.stdout or 'already exists' not in remote_response.stdout"
      failed_when: false
      loop: "{{ forks_response | json_query('results[].forks[]') }}"
      register: remote_response
      vars:
        repo_name: "{{ (item.remote | basename).split('.')[0] }}"
  tags:
    - clone_repos
    - create_remotes

- block:
    - name: "[GIT] Configure user name"
      blockinfile:
        create: true
        path: "{{ ansible_user_dir }}/.gitconfig"
        block: |
          [user]
            name = {{ git_user_name }}
        state: present

    - name: "[GIT] Configure user email in BBVA repositories"
      git_config:
        name: user.email
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ git_user_mail_work }}"
      loop: "{{ git_repositories.work }}"

    - name: "[GIT] Configure user email in personal repositories"
      git_config:
        name: user.email
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ git_user_mail_personal }}"
      loop: "{{ git_repositories.home }}"
  tags:
    - clone_repos
    - repos_config

- name: "[GIT] install broot"
  block:
    - name: "[GIT] download broot binary"
      become: true
      get_url:
        url: "{{ broot_binary_url }}"
        dest: /usr/local/bin/broot
        mode: 0755

    - name: "[GIT] create broot config directory"
      file:
        path: "{{ ansible_user_dir }}/.config/broot"
        state: directory

    - name: "[GIT] configure broot"
      copy:
        src: git-diff-conf.toml
        dest: "{{ ansible_user_dir }}/.config/broot/git-diff-conf.toml"
        mode: 0644

    - name: "[GIT] create alias for broot"
      lineinfile:
        path: "{{ ansible_user_dir }}/.bash_aliases"
        create: true
        state: present
        line: "alias gg='/usr/local/bin/broot --conf ~/.config/broot/git-diff-conf.toml --git-status'"
  tags:
    - broot

- name: "[GIT] configure git diff config"
  block:
    - name: "check if meld is installed"
      command: which meld
      register: meld_response
      ignore_errors: true

    - name: "[GIT] check if kompare is installed"
      command: which kompare
      register: kompare_response
      ignore_errors: true

    - name: "[GIT] configure git"
      vars:
        diff_editor: "{{ 'meld' if meld_response.rc == 0 else 'kompare' if kompare_response.rc == 0 }}"
      template:
        src: gitconfig.j2
        dest: "{{ ansible_user_dir }}/.gitconfig"
        mode: 0644
  tags:
    - git_diff
