---

- name: "[GIT] install broot"
  block:
    - name: "[GIT] download broot binary"
      become: true
      get_url:
        url: "{{ broot_binary_url }}"
        dest: /usr/local/bin/broot
        mode: 0755

    - name: "[GIT] create broot config directory"
      file:
        path: "{{ ansible_user_dir }}/.config/broot"
        state: directory

    - name: "[GIT] configure broot"
      copy:
        src: git-diff-conf.toml
        dest: "{{ ansible_user_dir }}/.config/broot/git-diff-conf.toml"
        mode: 0644

    - name: "[GIT] create alias for broot"
      lineinfile:
        path: "{{ ansible_user_dir }}/.bash_aliases"
        create: true
        state: present
        line: "alias gg='/usr/local/bin/broot --conf ~/.config/broot/git-diff-conf.toml --git-status'"
  tags:
    - broot

- name: "[GIT] configure git diff config"
  block:
    - name: "check if meld is installed"
      command: which meld
      register: meld_response
      changed_when: false
      ignore_errors: true

    - name: "[GIT] check if kompare is installed"
      command: which kompare
      register: kompare_response
      ignore_errors: true

    - name: "[GIT] configure git"
      vars:
        diff_editor: "{{ 'meld' if meld_response.rc == 0 else 'kompare' if kompare_response.rc == 0 }}"
      blockinfile:
        path: "{{ ansible_user_dir }}/.gitconfig"
        mode: 0644
        create: true
        block: |
          [diff]
            tool = {{ diff_editor }}

          [difftool]
              prompt = false

          [difftool "{{ diff_editor }}"]
              cmd = {{ diff_editor }} "$LOCAL" "$REMOTE"

          [merge]
              tool = {{ diff_editor }}

          [mergetool "{{ diff_editor }}"]
              cmd = {{ diff_editor }} "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"

          [gpg]
            format = ssh

          [gpg "ssh"]
            program = "/opt/1Password/op-ssh-sign"

          [commit]
            gpgsign = true
  tags:
    - git_diff

- block:
    - name: "[GIT] Create {{ git_dir }}"
      file:
        path: "{{ git_dir }}"
        state: directory

    - name: "[GIT] Clone git repositories"
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        clone: true
        accept_hostkey: true
      with_items:
        - "{{ git_repositories.home }}"
        - "{{ git_repositories.work }}"
      ignore_errors: true
  tags:
    - clone_repos

- name: "[GIT] configure repositories"
  block:
    - name: "[GIT] Configure user name"
      git_config:
        name: user.name
        scope: global
        value: "{{ git_config.user_name }}"

    - name: "[GIT] Configure user email in HOME repositories"
      git_config:
        name: user.email
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ git_config.user_email_home }}"
      loop: "{{ git_repositories.home }}"

    - name: "[GIT] Configure user email in WORK repositories"
      git_config:
        name: user.email
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ git_config.user_email_work }}"
      loop: "{{ git_repositories.work }}"

    - name: "[GIT] Configure ssh signinkey in HOME repositories"
      git_config:
        name: user.signingkey
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo  | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ lookup('onepassword', 'op://Private/osmollo/public key') }}"
      loop: "{{ git_repositories.home }}"

    - name: "[GIT] Configure ssh signinkey in WORK repositories"
      git_config:
        name: user.signingkey
        repo: "{{ item.dest | default(git_dir + '/' + ((item.repo  | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
        scope: local
        value: "{{ lookup('onepassword', 'op://Private/bbva/public key') }}"
      loop: "{{ git_repositories.work }}"
  tags:
    - clone_repos
    - repos_config

- name: "[GIT] Create remotes for repositories"
  block:
    # create remotes for repositories copied in other platforms

    - name: "[GIT] Create github repositories for WORK"
      include_role:
        name: tools/github_repo
      vars:
        github_token: "{{ git_tokens.github }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: true
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "github"
      with_items: "{{ git_repositories.work }}"

    - name: "[GIT] Create gitlab repositories for WORK"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ git_tokens.gitlab }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        visibility: private
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "gitlab"
      with_items: "{{ git_repositories.work }}"

    - name: "[GIT] Create new remote for work repositories"
      shell: "git remote add {{ item.remote }} {{ remote_url }}"
      args:
        chdir: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
      with_items: "{{ git_repositories.work }}"
      when: item.remote is defined
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote }}.com:osmollo/{{ (item.repo | basename).split('.')[0] }}.git"

    - name: "[GIT] Create github repositories for HOME"
      include_role:
        name: tools/github_repo
      vars:
        github_token: "{{ git_tokens.github }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: true
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "github"
      with_items: "{{ git_repositories.home }}"

    - name: "[GIT] Create gitlab repositories for HOME"
      include_role:
        name: tools/gitlab_repo
      vars:
        gitlab_token: "{{ git_tokens.gitlab }}"
        repo_name: "{{ (item.repo | basename).split('.')[0] }}"
        repo_private: private
        repo_state: present
      when:
        - item.remote is defined
        - item.remote == "gitlab"
      with_items: "{{ git_repositories.home }}"

    - name: "[GIT] Create new remote for home repositories"
      shell: "git remote add {{ item.remote }} {{ remote_url }}"
      args:
        chdir: "{{ item.dest | default(git_dir + '/' + ((item.repo | urlsplit('path')).split('/')[-1].split('.')[0])) }}"
      with_items: "{{ git_repositories.home }}"
      when: item.remote is defined
      register: remote_response
      failed_when: false
      vars:
        remote_url: "git@{{ item.remote }}.com:osmollo/{{ (item.repo | basename).split('.')[0] }}.git"

    - name: "[GIT] Delete push for remote"
      shell: "git remote set-url --push {{ item.remote }} no_push"
      with_items: "{{ git_repositories.home }}"
      when:
        - item.remote is defined
        - item.no_push is defined
        - item.no_push | bool
  tags:
    - clone_repos
    - create_remotes


