---

- name: "[ENVIRONMENT] Configure /etc/hosts"
  become: true
  become_method: sudo
  lineinfile:
    path: /etc/hosts
    line: "{{ item.ip }}\t{{ item.host }}"
  loop: "{{ etc_hosts }}"
  tags:
    - etc_hosts

- name: "[ENVIRONMENT] Configure /etc/profile"
  become: true
  become_method: sudo
  block:
    - name: "[ENVIRONMENT] edit /etc/profile [not KDE]"
      lineinfile:
        path: /etc/profile
        line: 'export VAULT_TOKEN=$(secret-tool lookup vault_sistemas TOKEN)'
      when: desktop_environment != 'kde'

    - name: "[ENVIRONMENT] edit /etc/profile [KDE]"
      lineinfile:
        path: /etc/profile
        line: 'export VAULT_TOKEN=$(kwalletcli -f Passwords -e TOKEN)'
      when: desktop_environment == 'kde'

- name: "[ENVIRONMENT] Delete default files"
  become: true
  become_method: sudo
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ansible_user_dir }}/.bashrc"
    - "{{ ansible_user_dir }}/.bash_history"
    - "{{ ansible_user_dir }}/.bash_aliases"
    - "{{ ansible_user_dir }}/.zshrc"
    - "{{ ssh_dir }}"
    - "{{ ansible_user_dir }}/.vault_pass*txt"
    - "{{ ansible_user_dir }}/.oh-my-zsh/custom/themes"
    - "{{ ansible_user_dir }}/.zhistory"

- name: "[ENVIRONMENT] restore .zhistory"
  when: use_dropbox
  block:
    - name: "[ENVIRONMENT] check if {{ dropbox_dir }}/datio/zhistory.{{ ansible_hostname }} exists"
      stat:
        path: "{{ dropbox_dir }}/datio/zhistory.{{ ansible_hostname }}"
      register: stat_response

    - name: "[ENVIRONMENT] restore .zhistory.{{ ansible_hostname }}"
      copy:
        src: "{{ dropbox_dir }}/datio/zhistory.{{ ansible_hostname }}"
        dest: "{{ ansible_user_dir }}/.zhistory"
        remote_src: true
        mode: 0600
      when: stat_response.stat.exists

    - name: "[ENVIRONMENT] check if {{ dropbox_dir }}/datio/zhistory exists"
      stat:
        path: "{{ dropbox_dir }}/datio/zhistory"
      register: stat2_response

    - name: "[ENVIRONMENT] restore .zhistory"
      copy:
        src: "{{ dropbox_dir }}/datio/zhistory"
        dest: "{{ ansible_user_dir }}/.zhistory"
        remote_src: true
        mode: 0600
      when:
        - not stat_response.stat.exists
        - stat2_response.stat.exists

- name: "[ENVIRONMENT] create .ssh directories"
  file:
    path: "{{ ansible_user_dir }}/{{ item }}"
    state: directory
  loop:
    - ".ssh"
    - ".ssh/aws"
    - ".ssh/isilon"
    - ".ssh/ccr"

- name: "[ENVIRONMENT] create .bash_aliases"
  template:
    src: bash_aliases.j2
    dest: "{{ ansible_user_dir }}/.bash_aliases"
  tags:
    - config_files
    - bash_aliases

- name: "[ENVIRONMENT] create config files"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: bashrc.j2
      dest: "{{ ansible_user_dir }}/.bashrc"
    - src: molecule-openrc.sh.j2
      dest: "{{ ansible_user_dir }}/molecule-openshrc.sh"
    - src: ssh_config.j2
      dest: "{{ ssh_dir }}/config"
  tags:
    - config_files
    - ssh_config

- name: "[ENVIRONMENT] create ssh keys"
  copy:
    dest: "{{ item.path }}"
    content: "{{ item.key }}"
    mode: "0600"
  loop: "{{ ssh_keys }}"
  no_log: true
  tags:
    - ssh_keys

- name: "[ENVIRONMENT] create vault_pass files"
  lineinfile:
    path: "{{ ansible_user_dir }}/{{ item.name }}"
    line: "{{ item.content }}"
    create: true
  no_log: true
  loop:
    - name: .vault_pass_personal.txt
      content: "{{ vault_personal_pass }}"
    - name: .vault_pass_datio.txt
      content: "{{ vault_datio_pass }}"

- name: "[ENVIRONMENT] create link to vault_pass file"
  file:
    src: "{{ ansible_user_dir }}/.vault_pass_personal.txt"
    dest: "{{ ansible_user_dir }}/.vault_pass.txt"
    state: link

- name: "[ENVIRONMENT] configure prezto"
  import_tasks: prezto.yml
  tags:
    - prezto
    - post_prezto

- name: "[ENVIRONMENT] Create links from Dropbox"
  block:
    - name: "[ENVIRONMENT] Wait until dropbox files exist"
      wait_for:
        path: "{{ item.src }}"
        timeout: "{{ wait_dropbox_sync }}"
      loop: "{{ links_to_create }}"

    - name: "[ENVIRONMENT] Create links from Dropbox"
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop: "{{ links_to_create }}"
