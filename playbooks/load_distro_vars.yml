---

- hosts: localhost
  connection: local
  tasks:
    - name: "Set compatible distributions"
      set_fact:
        debian_based:
          - "Debian"
          - "Deepin 20"
          - "LMDE"
        ubuntu_based:
          - "Ubuntu"
          - "Linux Mint"
          - "KDE neon"
          - "elementary OS"
          - "Pop!_OS"
        fedora_based:
          - "Fedora"
        arch_based:
          - "Archlinux"

    - name: "[DEBIAN] Set LINUX_DISTRIBUTION variable"
      set_fact:
        linux_distribution: "debian"
      when: ansible_distribution in debian_based

    - name: "[UBUNTU] Set LINUX_DISTRIBUTION variable"
      set_fact:
        linux_distribution: "ubuntu"
      when: ansible_distribution in ubuntu_based

    - name: "[FEDORA] Set LINUX_DISTRIBUTION variable"
      set_fact:
        linux_distribution: "fedora"
      when: ansible_distribution in fedora_based

    - name: "[ARCH] Set LINUX_DISTRIBUTION variable"
      set_fact:
        linux_distribution: "arch"
      when: ansible_distribution in arch_based

    - name: "Set LINUX_DISTRIBUTION when is undefined"
      set_fact:
        linux_distribution: "foobar"
      when: linux_distribution is undefined

    - name: "Get Debian CODENAME"
      shell: |
        set -o pipefail
        grep DEBIAN_CODENAME /etc/os-release | awk -F'=' '{ print $2 }'
      args:
        executable: /bin/bash
      register: debian_response
      changed_when: false
      when:
        - linux_distribution == "debian"
        - ansible_distribution != "Deepin 20"

    - name: "Set DEBIAN_CODENAME variable"
      set_fact:
        debian_codename: "{{ debian_response.stdout }}"
      when:
        - linux_distribution == "debian"
        - ansible_distribution != "Deepin 20"

    - name: "Set DEBIAN_VERSION variable"
      set_fact:
        debian_version: "{{ debian_versions[debian_codename] }}"
      vars:
        debian_versions:
          bookworm: "12"
          trixie: "13"
      when:
        - linux_distribution == "debian"
        - ansible_distribution != "Deepin 20"

    - name: "Set DEBIAN_VERSION variable"
      set_fact:
        debian_version: "10"
      when: ansible_distribution == "Deepin 20"

    - name: "Get Ubuntu CODENAME"
      shell: |
        set -o pipefail
        grep UBUNTU_CODENAME /etc/os-release | awk -F'=' '{ print $2 }'
      args:
        executable: /bin/bash
      register: response_codename
      changed_when: false
      when: linux_distribution == "ubuntu"

    - name: "Set UBUNTU_CODENAME variable"
      set_fact:
        ubuntu_codename: "{{ response_codename.stdout }}"
      when: linux_distribution == "ubuntu"

    - name: "Set UBUNTU_VERSION variable"
      set_fact:
        ubuntu_version: "{{ ubuntu_versions[ubuntu_codename].split('.')[0] }}"
        ubuntu_version_long: "{{ ubuntu_versions[ubuntu_codename] }}"
      vars:
        ubuntu_versions:
          plucky: "25.04"
      when: linux_distribution == "ubuntu"

    - name: "Is Ubuntu LTS?"
      when: linux_distribution == "ubuntu"
      block:
        - name: "Read /etc/os-release"
          shell: |
            set -o pipefail
            grep "VERSION=" /etc/os-release
          args:
            executable: /bin/bash
          register: response_lts
          changed_when: false

        - name: "Set variable 'ubuntu_lts' to '{{ is_lts }}'"
          vars:
            is_lts: "{{ 'LTS' in response_lts.stdout }}"
          set_fact:
            ubuntu_lts: "{{ is_lts }}"

    - name: "Set FEDORA_VERSION variable"
      set_fact:
        fedora_version: "{{ ansible_distribution_version }}"
      when: linux_distribution == "fedora"

    - name: "[KDE] Set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "kde"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'KDE' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "[GNOME] Set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "gnome"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'GNOME' in ansible_env.XDG_CURRENT_DESKTOP or 'Unity' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "[DEEPIN] Set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "deepin"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'Deepin' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "[PANTHEON] set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "pantheon"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'Pantheon' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "[CINNAMON] Set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "cinnamon"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'Cinnamon' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "[XFCE] Set DESKTOP_ENVIRONMENT variable"
      set_fact:
        desktop_environment: "xfce"
      when:
        - ansible_env.XDG_CURRENT_DESKTOP is defined
        - "'XFCE' in ansible_env.XDG_CURRENT_DESKTOP"

    - name: "Set DESKTOP_ENVIRONMENT when is undefined"
      set_fact:
        desktop_environment: "foobar"
      when:
        desktop_environment is undefined

    - name: "[GNOME] set GNOME_VERSION variable"
      when: desktop_environment == "gnome"
      block:
        - name: "[GNOME] get gnome-shell version"
          command: gnome-shell --version
          register: gnome_response
          changed_when: false

        - name: "[GNOME] set GNOME_VERSION variable"
          set_fact:
            GNOME_VERSION: "{{ gnome_response.stdout.split(' ')[2].split('.')[0] }}"

        - name: "[GNOME] version"
          debug: var=GNOME_VERSION

    - block:
        - name: "get xserver"
          shell: "loginctl show-session $(loginctl | awk '/tty/ {print $1}') -p Type | awk -F= '{print $2}'"
          register: get_xserver
          changed_when: false

        # Values: x11, wayland...
        - name: "Set XSERVER variable"
          set_fact:
            xserver: "{{  get_xserver.stdout }}"

    - when: linux_distribution == "debian"
      vars:
        ansible_user: "{{ lookup('env', 'USER') }}"
      block:
        - name: "check if '{{ ansible_user }}' has sudo permissions"
          become: true
          lineinfile:
            name: /etc/sudoers
            line: "{{ ansible_user }}  ALL=(ALL:ALL) ALL"
            state: present
          check_mode: true
          ignore_errors: true
          changed_when: false
          register: response

        - fail:
            msg: "Por favor, ejecuta el playbook 'playbooks/debian_sudo.yml y cierra sesi√≥n antes de continuar"
          when: response.failed

#      failed_when: (conf is changed) or (conf is failed)
